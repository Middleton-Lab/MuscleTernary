[{"path":"https://middleton-lab.github.io/MuscleTernary/articles/centroid.html","id":"centroid-location-and-centroid-size","dir":"Articles","previous_headings":"","what":"Centroid location and centroid size","title":"Working with stl files","text":"centroid location (often just “centroid”) mesh simply mean column. simply usage, centroid_location() takes single argument string path file. size centroid 3D distance vertex centroid.","code":"colMeans(stl) #> [1]   64.784475    8.529847 -567.928419  centroid_location(stl_path) #> [1]   64.784475    8.529847 -567.928419 # Calculate the centroid centroid <- centroid_location(stl_path)  # Apply the distance formula sqrt(sum((centroid[1] - stl[, 1]) ^ 2 +            (centroid[2] - stl[, 2]) ^ 2 +            (centroid[3] - stl[, 3]) ^ 2)) #> [1] 2576.131  centroid_size(stl_path) #> [1] 2576.131"},{"path":"https://middleton-lab.github.io/MuscleTernary/articles/centroid.html","id":"area-of-an-stl-mesh","dir":"Articles","previous_headings":"","what":"Area of an stl mesh","title":"Working with stl files","text":"area stl mesh summed area triangles making mesh.","code":"area <- stl_area(stl_path) area #> [1] 3280.389"},{"path":"https://middleton-lab.github.io/MuscleTernary/articles/centroid.html","id":"deriving-ternary-coordinates-from-a-pair-of-stl-meshes","dir":"Articles","previous_headings":"","what":"Deriving ternary coordinates from a pair of stl meshes","title":"Working with stl files","text":"get ternary coordinated stl mesh files, first need locations centroids. use left mPTd: centroid_location() returns 3-element vector, can extract tibble. ways step, straightforward, verbose. repeat right mPTd bind left right together comparative data: Passing tibble coords_to_ternary() produces ternary coordinates. using grouping argument, get coordinates left right (average two). can make simple ternary plot comparing muscles’ orientations.","code":"L_mPTd_Or <- centroid_location(system.file(\"extdata\",                                             \"L_mPTd_Or.stl\",                                             package = \"MuscleTernary\")) L_mPTd_Ins <- centroid_location(system.file(\"extdata\",                                             \"L_mPTd_Ins.stl\",                                             package = \"MuscleTernary\")) mPTd_L <- tibble(   muscle = \"mPTd\",   side = \"left\",   x_origin = L_mPTd_Or[1],   y_origin = L_mPTd_Or[2],   z_origin = L_mPTd_Or[3],   x_insertion = L_mPTd_Ins[1],   y_insertion = L_mPTd_Ins[2],   z_insertion = L_mPTd_Ins[3] )  mPTd_L #> # A tibble: 1 × 8 #>   muscle side  x_origin y_origin z_origin x_insertion y_insertion z_insertion #>   <chr>  <chr>    <dbl>    <dbl>    <dbl>       <dbl>       <dbl>       <dbl> #> 1 mPTd   left      26.7     21.4    -456.        64.8        8.53       -568. R_mPTd_Or <- centroid_location(system.file(\"extdata\",                                             \"R_mPTd_Or.stl\",                                             package = \"MuscleTernary\")) R_mPTd_Ins <- centroid_location(system.file(\"extdata\",                                             \"R_mPTd_Ins.stl\",                                             package = \"MuscleTernary\"))  mPTd_R <- tibble(   muscle = \"mPTd\",   side = \"right\",   x_origin = R_mPTd_Or[1],   y_origin = R_mPTd_Or[2],   z_origin = R_mPTd_Or[3],   x_insertion = R_mPTd_Ins[1],   y_insertion = R_mPTd_Ins[2],   z_insertion = R_mPTd_Ins[3] )  mPTd <- bind_rows(mPTd_L, mPTd_R) mPTd #> # A tibble: 2 × 8 #>   muscle side  x_origin y_origin z_origin x_insertion y_insertion z_insertion #>   <chr>  <chr>    <dbl>    <dbl>    <dbl>       <dbl>       <dbl>       <dbl> #> 1 mPTd   left      26.7     21.4    -456.        64.8       8.53        -568. #> 2 mPTd   right    -23.4     18.7    -460.       -67.2      -0.988       -560. coords_to_ternary(mPTd) #> # A tibble: 2 × 5 #>   muscle side      x     y     z #>   <chr>  <chr> <dbl> <dbl> <dbl> #> 1 mPTd   left   10.2  1.16  88.6 #> 2 mPTd   right  15.4  3.09  81.5  coords_to_ternary(mPTd) |>    ggtern(aes(x, y, z, color = side)) +   geom_point(size = 5)"},{"path":"https://middleton-lab.github.io/MuscleTernary/articles/centroid.html","id":"estimating-pcsa","dir":"Articles","previous_headings":"","what":"Estimating PCSA","title":"Working with stl files","text":"origin insertion meshes can used estimate physiological cross-sectional area (PCSA; see Sellers, et al., 2017 additional discussion). PSCA calculated volume frustum areas equal attachments (\\(V_m\\)) divided fascicle length (\\(l_f\\)) multiplied cosine angle pennation (\\(\\theta\\)). \\[PCSA = \\frac{V_m}{l_f} \\cdot \\cos(\\theta)\\] \\[V_m = \\frac{l_m}{3} \\cdot (A_{} \\cdot A_{ins} + \\sqrt{A_{} \\cdot A_{ins}})\\] \\(l_m\\) distance centroid origin centroid insertion \\(A_{}\\) \\(A_{ins}\\) origin insertion areas, respectively. pair stl meshes values \\(l_f\\) (fascicle_length defaults 1) \\(\\theta\\) (theta defaults 0, pennation), pcsa() calculates PCSA. Note default pcsa() uses areas stl meshes. Boolean flag stl_area use centroid size set FALSE. default, pcsa() assumes \\(\\theta\\) measured radians units length area millimeters. important order scale muscle force properly.","code":"PCSA <- pcsa(system.file(\"extdata\",                          \"L_mPTd_Or.stl\",                          package = \"MuscleTernary\"),              system.file(\"extdata\",                          \"L_mPTd_Ins.stl\",                          package = \"MuscleTernary\")) #> Assuming theta is measured in radians. #> Assuming units are mm. #> Using mesh area for calculation. PCSA #> [1] 1670.846"},{"path":"https://middleton-lab.github.io/MuscleTernary/articles/centroid.html","id":"estimating-muscle-force","dir":"Articles","previous_headings":"","what":"Estimating muscle force","title":"Working with stl files","text":"PCSA multiplied specific tension muscle tissue, \\(T_{specific}\\), yields estimate muscle force output (Porro et al., 2011; Holmes Taylor, 2021). \\(T_{specific}\\) (Tspec) defaults 0.3 \\(N / mm^2\\), reasonable value reptile muscle.","code":"muscle_force(PCSA) #> [1] 501.2537"},{"path":"https://middleton-lab.github.io/MuscleTernary/articles/centroid.html","id":"putting-it-together","dir":"Articles","previous_headings":"","what":"Putting it together","title":"Working with stl files","text":"can now estimate muscle force mPTd scale ternary plot points according size. add column mPTd force estimates: make ternary plot  default, ggplot scales point range maximize difference, relatively small difference left right exaggerated. See article “Make ternary plot” details modifying size scale range.","code":"mPTd <- mPTd |>    mutate(     Force = c(muscle_force(pcsa(system.file(\"extdata\",                                             \"L_mPTd_Or.stl\",                                             package = \"MuscleTernary\"),                                 system.file(\"extdata\",                                             \"L_mPTd_Ins.stl\",                                             package = \"MuscleTernary\"))),               muscle_force(pcsa(system.file(\"extdata\",                                             \"R_mPTd_Or.stl\",                                             package = \"MuscleTernary\"),                                 system.file(\"extdata\",                                             \"R_mPTd_Ins.stl\",                                             package = \"MuscleTernary\"))))   ) mPTd #> # A tibble: 2 × 9 #>   muscle side  x_origin y_origin z_origin x_insertion y_insertion z_insertion #>   <chr>  <chr>    <dbl>    <dbl>    <dbl>       <dbl>       <dbl>       <dbl> #> 1 mPTd   left      26.7     21.4    -456.        64.8       8.53        -568. #> 2 mPTd   right    -23.4     18.7    -460.       -67.2      -0.988       -560. #> # ℹ 1 more variable: Force <dbl> coords_to_ternary(mPTd) |>    ggtern(aes(x, y, z, color = side, size = Force)) +   geom_point()"},{"path":"https://middleton-lab.github.io/MuscleTernary/articles/centroid.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Working with stl files","text":"Cost , Middleton KM, Sellers KC, Echols MS, Witmer LM, Davis JL, Holliday CM. 2020. Palatal Biomechanics Significance Cranial Kinesis Tyrannosaurus rex. Anat Rec 303:999-1017. Cost , Sellers KC, Rozin RE, Spates , Middleton KM, Holliday CM. 2022. 2D 3D visualizations archosaur jaw muscle mechanics, ontogeny phylogeny using ternary diagrams 3D modeling. J Exp Biol 225 Holmes, M., . B. Taylor. 2021. influence jaw-muscle fibre-type phenotypes estimating maximum muscle bite forces primates. Interface Focus 11:20210009. Porro, L. B., C. M. Holliday, F. Anapol, L. C. Ontiveros, L. T. Ontiveros, C. F. Ross. 2011. Free body analysis, beam mechanics, finite element modeling mandible Alligator mississippiensis. J. Morphol. 272:910-937. Sellers, K. C., K. M. Middleton, J. L. Davis, C. M. Holliday. 2017. Ontogeny bite force validated biomechanical model American alligator. J. Exp. Biol. 220:2036-2046. Wilken , Middleton KM, Sellers KC, Cost , Holliday CM. 2019. roles joint tissues jaw muscles palatal biomechanics Savannah monitor (Varanus exanthematicus) significance cranial kinesis. J Exp Biol 222:1-14. Wilken , Sellers KC, Cost , Rozin RE, Middleton KM, Holliday CM. 2020. Connecting chondrocranium: Biomechanics suspensorium reptiles. Vertebrate Zoology 70:275-290.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/articles/ternary_animation.html","id":"saving-the-animation","dir":"Articles","previous_headings":"","what":"Saving the animation","title":"Animate a ternary plot","text":"save animation .gif file, use additional software: ImageMagick. Installation ImageMagick beyond scope article, ’s difficult. set options ani.options differently MacOS vs. Windows. call saveGIF().","code":"# Set interval to 1/24 s. ani.options(interval = 1/24)  # For MacOS with ImageMagick installed somewhere on the path # e.g., using homebrew.  # ani.options(convert = \"convert\")  # For Windows, install the ImageMagick standalone release: # (http://www.imagemagick.org/script/binary-releases.php). Use a # variation of the next line to set the absolute path to convert.exe.  # ani.options(convert = 'C:\\\\Program Files\\\\ImageMagick\\\\convert.exe')  saveGIF({for (i in 1:length_out) print(P[[i]])},         movie.name = \"ternary_animation.gif\",         ani.width = 800, ani.height = 600)"},{"path":"https://middleton-lab.github.io/MuscleTernary/articles/ternary_plot_xfiber.html","id":"plotting-only-the-endpoints-of-tracks","dir":"Articles","previous_headings":"","what":"Plotting only the endpoints of tracks","title":"Make a ternary plot from Xfiber data","text":"may want plot 9,000 individual track segments. One approach draw 3D vector starting point ending point reconstruct orientation vector. find_track_ends() reduces raw output read_xfiber_xml() set vectors represents endpoints track. passing coords_to_ternary() plotting:","code":"Ends <- D |>    find_track_ends() Ends #> # A tibble: 235 × 10 #>    muscle track_num x_origin y_origin z_origin x_insertion y_insertion #>    <chr>      <dbl>    <dbl>    <dbl>    <dbl>       <dbl>       <dbl> #>  1 SC             0   11273.   21712.   59873       26581       31187. #>  2 SC             1   17940    25397.   66452.      29257.      33204. #>  3 SC             2    7106.   17896.   37854.      14036.      25704. #>  4 SC             3   10703.   21624.   42854.      17019.      27151. #>  5 SC             4    6053.   16492.   37108.      26756.      32152. #>  6 SC             5   11624.   22765.   44346.      18291.      28160  #>  7 SC             6    6097.   17808.   44433.      18203.      26318. #>  8 SC             7   13334.   24563.   46451.      15528.      26932. #>  9 SC             8    7544.   17677.   38248.      20352.      27327. #> 10 SC             9    5878.   17414.   41933       26669.      33029. #> # ℹ 225 more rows #> # ℹ 3 more variables: z_insertion <dbl>, OrientationTheta <dbl>, #> #   OrientationPhi <dbl> max(Ends$track_num) #> [1] 234 Ends |>    coords_to_ternary() |>   ggtern(aes(x = x, y = y, z = z)) +   geom_point(size = 2, alpha = 0.25, pch = 16) +   labs(x       = \"ML\",        xarrow  = \"Mediolateral\",        y       = \"DV\",        yarrow  = \"Dorsoventral\",        z       = \"RC\",        zarrow  = \"Rostrocaudal\") +   theme_bw(base_size = 16) +   theme_showarrows()"},{"path":"https://middleton-lab.github.io/MuscleTernary/articles/ternary_plot_xfiber.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Make a ternary plot from Xfiber data","text":"Sullivan, S. P., F. R. McGechie, K. M. Middleton, C. M. Holliday. 2019. 3D Muscle Architecture Pectoral Muscles European Starling (Sturnus vulgaris). Integr Org Biol 1:oby010","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kevin Middleton. Author, maintainer.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Middleton K (2023). MuscleTernary: Plot Muscle Resultants Ternary Space. R package version 0.24.","code":"@Manual{,   title = {MuscleTernary: Plot Muscle Resultants in Ternary Space},   author = {Kevin Middleton},   year = {2023},   note = {R package version 0.24}, }"},{"path":[]},{"path":"https://middleton-lab.github.io/MuscleTernary/index.html","id":"preliminaries","dir":"","previous_headings":"","what":"Preliminaries","title":"Plot Muscle Resultants in Ternary Space","text":"Install remotes (haven’t already): install.packages(\"remotes\") might also need install Rtools (https://cran.r-project.org/bin/windows/Rtools/) installation step work correctly.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/index.html","id":"for-initial-installation-or-updates","dir":"","previous_headings":"","what":"For initial installation or updates","title":"Plot Muscle Resultants in Ternary Space","text":"remotes::install_github(dependencies = TRUE, build_vignettes = TRUE) View ?MuscleTernary demo(ternary_plot) demo.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/CrossProduct3D.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute 3D vector cross product — CrossProduct3D","title":"Compute 3D vector cross product — CrossProduct3D","text":"Compute vector cross product x y, return components indexed . See: https://stackoverflow.com//21736807/168137","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/CrossProduct3D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute 3D vector cross product — CrossProduct3D","text":"","code":"CrossProduct3D(x, y, i = 1:3)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/CrossProduct3D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute 3D vector cross product — CrossProduct3D","text":"x Vector matrix y Vector matrix Indices","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/CrossProduct3D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute 3D vector cross product — CrossProduct3D","text":"Cross product matrix","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/MuscleTernary-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Muscle Ternary — MuscleTernary-package","title":"Muscle Ternary — MuscleTernary-package","text":"description","code":""},{"path":[]},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/MuscleTernary-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Muscle Ternary — MuscleTernary-package","text":"Kevin M. Middleton (middletonk@missouri.edu)","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/Muscle_Force.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate muscle force — muscle_force","title":"Estimate muscle force — muscle_force","text":"Use PCSA specific tension estimate muscle force","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/Muscle_Force.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate muscle force — muscle_force","text":"","code":"muscle_force(PCSA, Tspec = 0.3)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/Muscle_Force.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate muscle force — muscle_force","text":"PCSA numeric: Value PCSA (e.g., pcsa()) Tspec numeric: Value specific tension muscle cubic mm. Default 0.3 reasonable mammalian muscle.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/Muscle_Force.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate muscle force — muscle_force","text":"numeric: Estimate muscle force","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/PCSA.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate PCSA from from a pair of muscle attachment stl meshes. — pcsa","title":"Estimate PCSA from from a pair of muscle attachment stl meshes. — pcsa","text":"Estimate PCSA pair muscle attachment stl meshes.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/PCSA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate PCSA from from a pair of muscle attachment stl meshes. — pcsa","text":"","code":"pcsa(   stl1,   stl2,   fascicle_length = 1,   theta = 0,   units_adjust = 1,   stl_area = TRUE )"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/PCSA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate PCSA from from a pair of muscle attachment stl meshes. — pcsa","text":"stl1 String: Path stl. stl2 String: Path stl. fascicle_length Numeric: Fascicle length theta Numeric: Fascicle angle (radians) units_adjust Numeric: Multiplier adjustment units mm. stl_area Boolean: Use area stl mesh (default) use centroid size.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/PCSA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate PCSA from from a pair of muscle attachment stl meshes. — pcsa","text":"numeric: Estimate PCSA muscle defined two attachments `stl1` `stl2`.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/RU.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate rotation matrix — RU","title":"Calculate rotation matrix — RU","text":"Calculate rotation matrix required rotate vector onto vector B. vectors normalized unit vectors prior rotation. See: http://math.stackexchange.com//897677/6965","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/RU.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate rotation matrix — RU","text":"","code":"RU(A, B)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/RU.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate rotation matrix — RU","text":"Vector (usually unit vector) B Vector","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/RU.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate rotation matrix — RU","text":"U rotation matrix B","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/centroid_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroid location — centroid_location","title":"Calculate centroid location — centroid_location","text":"Calculate centroid location","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/centroid_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroid location — centroid_location","text":"","code":"centroid_location(fname)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/centroid_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroid location — centroid_location","text":"fname String: Path stl file","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/centroid_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroid location — centroid_location","text":"Numeric vector centroid location","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/centroid_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate centroid size for an stl file — centroid_size","title":"Calculate centroid size for an stl file — centroid_size","text":"Calculate centroid size stl file","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/centroid_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate centroid size for an stl file — centroid_size","text":"","code":"centroid_size(fname)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/centroid_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate centroid size for an stl file — centroid_size","text":"fname String: Path stl file","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/centroid_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate centroid size for an stl file — centroid_size","text":"Numeric: Centroid size","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/coords_to_ternary.html","id":null,"dir":"Reference","previous_headings":"","what":"Process coordinates data.frame — coords_to_ternary","title":"Process coordinates data.frame — coords_to_ternary","text":"Process coordinates data.frame","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/coords_to_ternary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process coordinates data.frame — coords_to_ternary","text":"","code":"coords_to_ternary(coords, grouping = NULL)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/coords_to_ternary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process coordinates data.frame — coords_to_ternary","text":"coords `data.frame` `tibble` containing coordinates columns plotted ternary space. Required columns least \"muscle\", \"x_origin\", \"y_origin\", \"z_origin\", \"x_insertion\", \"y_insertion\", \"z_insertion\" grouping Character vector grouping variables calculating means. Defaults `NULL`, return original rows columns","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/coords_to_ternary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process coordinates data.frame — coords_to_ternary","text":"data.frame suitable plotting ggtern().","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Dot product — dot","title":"Dot product — dot","text":"Dot product","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dot product — dot","text":"","code":"dot(u, v)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dot product — dot","text":"u Numeric vector v Numeric vector","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dot product — dot","text":"Numeric dot product `u` `v`.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/euler.html","id":null,"dir":"Reference","previous_headings":"","what":"Decompose rotation matrix U into Euler angles — euler","title":"Decompose rotation matrix U into Euler angles — euler","text":"Note order x, y, x. See: http://nghiaho.com/?page_id=846","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/euler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decompose rotation matrix U into Euler angles — euler","text":"","code":"euler(U)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/euler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decompose rotation matrix U into Euler angles — euler","text":"U Rotation matrix","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/euler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decompose rotation matrix U into Euler angles — euler","text":"Euler angles","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/find_track_ends.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce Xfiber tracks to vectors connecting the two endpoints — find_track_ends","title":"Reduce Xfiber tracks to vectors connecting the two endpoints — find_track_ends","text":"function finds (x, y, z) coordinates starting endsing points Xfiber tracks object read `read_xfiber_xml()`.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/find_track_ends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce Xfiber tracks to vectors connecting the two endpoints — find_track_ends","text":"","code":"find_track_ends(Tracks)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/find_track_ends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce Xfiber tracks to vectors connecting the two endpoints — find_track_ends","text":"Tracks data.frame: Object containing full set tracks column `muscle`, required `coords_to_ternary()`.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/find_track_ends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce Xfiber tracks to vectors connecting the two endpoints — find_track_ends","text":"tibble: `Tracks` reduced one row per track.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/geom_shiftedtext.html","id":null,"dir":"Reference","previous_headings":"","what":"geom for labeling geom_points — geom_shiftedtext","title":"geom for labeling geom_points — geom_shiftedtext","text":"See: http://stackoverflow.com/q/19694497/168137","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/geom_shiftedtext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geom for labeling geom_points — geom_shiftedtext","text":"","code":"geom_shiftedtext(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   parse = FALSE,   ... )"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/geom_shiftedtext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geom for labeling geom_points — geom_shiftedtext","text":"mapping aes mapping data data stat stat position position parse Parse ... Additional options passed ","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/geom_shiftedtext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geom for labeling geom_points — geom_shiftedtext","text":"geom usable ggplot()","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/get_euler_angles.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Euler angles for rotating A onto B. — get_euler_angles","title":"Calculate the Euler angles for rotating A onto B. — get_euler_angles","text":"utility set geometry known normal (0, 1, 0), calculate xyz rotation sequence match another vector.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/get_euler_angles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Euler angles for rotating A onto B. — get_euler_angles","text":"","code":"get_euler_angles(A, B)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/get_euler_angles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Euler angles for rotating A onto B. — get_euler_angles","text":"Vector (usually unit vector) B Vector","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/get_euler_angles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Euler angles for rotating A onto B. — get_euler_angles","text":"Euler angles B","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/interpolate_ternary.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate between two point in a coordinates object. — interpolate_ternary","title":"Interpolate between two point in a coordinates object. — interpolate_ternary","text":"Interpolate two point coordinates object.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/interpolate_ternary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate between two point in a coordinates object. — interpolate_ternary","text":"","code":"interpolate_ternary(x, length_out = 200)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/interpolate_ternary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate between two point in a coordinates object. — interpolate_ternary","text":"x Row coordinates file. contain columns `x_1`, `y_1`, `z_1`, `x_2`, `y_2`, `z_2`, example output `merge_coords()`. length_out Total length output `data.frame`.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/interpolate_ternary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate between two point in a coordinates object. — interpolate_ternary","text":"`data.frame` interpolated points added.   variables copied fill.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/interpolate_xyz.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate (x, y, z) coordinates — interpolate_xyz","title":"Interpolate (x, y, z) coordinates — interpolate_xyz","text":"Given start end point pair xyz coordinate, return linearly interpolated data.frame . functional also adds `.frame` column allows animation.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/interpolate_xyz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate (x, y, z) coordinates — interpolate_xyz","text":"","code":"interpolate_xyz(start, end, length_out)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/interpolate_xyz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate (x, y, z) coordinates — interpolate_xyz","text":"start Vector xyz coordinate start position. end Vector xyz coordinate end position. length_out Total length output `data.frame`.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/interpolate_xyz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate (x, y, z) coordinates — interpolate_xyz","text":"`data.frame` interpolated `start` `end`   column frame number.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/make_mel.html","id":null,"dir":"Reference","previous_headings":"","what":"Write mel file — make_mel","title":"Write mel file — make_mel","text":"Write mel file","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/make_mel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write mel file — make_mel","text":"","code":"make_mel(   stl,   data,   shader_file = \"default\",   outfile = NULL,   scale_radius = TRUE,   use_stl = FALSE,   max_radius = 8,   rev_arrows = TRUE,   write_file = TRUE )"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/make_mel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write mel file — make_mel","text":"stl string Location stl file. Assumed present working directory data data.frame Object data shader_file string Either \"default\" use standard palette, path csv file colors muscle. outfile string Name file write . Defaults base name stl file. scale_radius boolean (default TRUE) radius scaled based force variable? use_stl boolean (default FALSE. scaling use maximum value automatically based stl centroid size? max_radius numeric Maximum radius value. Ignored scale_radius TRUE. rev_arrows boolean (default TRUE) arrowheads reversed (probably want TRUE) write_file boolean (default TRUE) mel file written ","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/make_unit_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a unit vector from a given vector — make_unit_vector","title":"Create a unit vector from a given vector — make_unit_vector","text":"Create unit vector given vector","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/make_unit_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a unit vector from a given vector — make_unit_vector","text":"","code":"make_unit_vector(x)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/make_unit_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a unit vector from a given vector — make_unit_vector","text":"x Vector length 3.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/make_unit_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a unit vector from a given vector — make_unit_vector","text":"normalized unit vector length 3","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/means_by_muscle.html","id":null,"dir":"Reference","previous_headings":"","what":"Means by Muscle — means_by_muscle","title":"Means by Muscle — means_by_muscle","text":"Aggregate means muscle.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/means_by_muscle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Means by Muscle — means_by_muscle","text":"","code":"means_by_muscle(df_no_means)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/means_by_muscle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Means by Muscle — means_by_muscle","text":"df_no_means data.frame two rows muscle","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/means_by_muscle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Means by Muscle — means_by_muscle","text":"data.frame means aggregated muscle.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/muscle_color_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Holliday Lab Muscle Color Map — muscle_color_map","title":"Holliday Lab Muscle Color Map — muscle_color_map","text":"function returns scale_color_manual() matches Holliday lab muscle color map.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/muscle_color_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Holliday Lab Muscle Color Map — muscle_color_map","text":"","code":"muscle_color_map()"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/muscle_color_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Holliday Lab Muscle Color Map — muscle_color_map","text":"scale_color_manual() can added   ggplot","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/muscle_fill_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Holliday Lab Muscle Color Map — muscle_fill_map","title":"Holliday Lab Muscle Color Map — muscle_fill_map","text":"function returns scale_fill_manual() matches Holliday lab muscle color map.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/muscle_fill_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Holliday Lab Muscle Color Map — muscle_fill_map","text":"","code":"muscle_fill_map()"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/muscle_fill_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Holliday Lab Muscle Color Map — muscle_fill_map","text":"scale_fill_manual() can added   ggplot","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize a vector (L2 norm) — norm","title":"Normalize a vector (L2 norm) — norm","text":"Normalize vector (L2 norm)","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize a vector (L2 norm) — norm","text":"","code":"norm(u)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize a vector (L2 norm) — norm","text":"u Vector","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize a vector (L2 norm) — norm","text":"L2 norm `u`.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/read_stl.html","id":null,"dir":"Reference","previous_headings":"","what":"Import STL mesh — read_stl","title":"Import STL mesh — read_stl","text":"wrapper `rgl::readSTL()`, returns `NA` read fails (ASCII STLs binary STLs use big endian encoding).","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/read_stl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import STL mesh — read_stl","text":"","code":"read_stl(fname)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/read_stl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import STL mesh — read_stl","text":"fname string path stl file","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/read_stl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import STL mesh — read_stl","text":"numeric matrix (x, y, z) coordinates vertices successful read. `NA` warning.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/read_stl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import STL mesh — read_stl","text":"","code":"read_stl(system.file(\"extdata\",                      \"L_mAMEM_or.stl\",                      package = \"MuscleTernary\")) #>            [,1]      [,2]     [,3] #>   [1,] 12.15162 10.148877 5.658968 #>   [2,] 12.33711 10.434732 5.581894 #>   [3,] 12.46051 10.235008 5.722544 #>   [4,] 12.35026  9.944320 5.852467 #>   [5,] 12.15162 10.148877 5.658968 #>   [6,] 12.46051 10.235008 5.722544 #>   [7,] 12.26303  9.186192 6.106524 #>   [8,] 12.30602  9.400578 6.112974 #>   [9,] 12.44357  9.258952 6.177144 #>  [10,] 12.37103  9.021856 6.100791 #>  [11,] 12.26303  9.186192 6.106524 #>  [12,] 12.44357  9.258952 6.177144 #>  [13,] 12.30602  9.400578 6.112974 #>  [14,] 12.40459  9.663617 6.032218 #>  [15,] 12.55953  9.471941 6.154070 #>  [16,] 12.33711 10.434732 5.581894 #>  [17,] 12.61014 10.477591 5.596660 #>  [18,] 12.46051 10.235008 5.722544 #>  [19,] 12.44357  9.258952 6.177144 #>  [20,] 12.30602  9.400578 6.112974 #>  [21,] 12.55953  9.471941 6.154070 #>  [22,] 12.35026  9.944320 5.852467 #>  [23,] 12.46051 10.235008 5.722544 #>  [24,] 12.61377 10.100669 5.829659 #>  [25,] 12.35649  8.911090 5.948167 #>  [26,] 12.37103  9.021856 6.100791 #>  [27,] 12.51580  8.913315 6.001493 #>  [28,] 12.40459  9.663617 6.032218 #>  [29,] 12.35026  9.944320 5.852467 #>  [30,] 12.64741  9.903185 5.952294 #>  [31,] 12.35649  8.911090 5.948167 #>  [32,] 12.51580  8.913315 6.001493 #>  [33,] 12.48849  8.789741 5.798821 #>  [34,] 12.63057  9.048625 6.101481 #>  [35,] 12.37103  9.021856 6.100791 #>  [36,] 12.44357  9.258952 6.177144 #>  [37,] 12.61377 10.100669 5.829659 #>  [38,] 12.64741  9.903185 5.952294 #>  [39,] 12.35026  9.944320 5.852467 #>  [40,] 12.51580  8.913315 6.001493 #>  [41,] 12.37103  9.021856 6.100791 #>  [42,] 12.63057  9.048625 6.101481 #>  [43,] 12.46051 10.235008 5.722544 #>  [44,] 12.61014 10.477591 5.596660 #>  [45,] 12.69531 10.276836 5.730695 #>  [46,] 12.40459  9.663617 6.032218 #>  [47,] 12.72354  9.688169 6.075475 #>  [48,] 12.55953  9.471941 6.154070 #>  [49,] 12.46051 10.235008 5.722544 #>  [50,] 12.69531 10.276836 5.730695 #>  [51,] 12.61377 10.100669 5.829659 #>  [52,] 12.71003  9.286296 6.174933 #>  [53,] 12.44357  9.258952 6.177144 #>  [54,] 12.55953  9.471941 6.154070 #>  [55,] 12.72354  9.688169 6.075475 #>  [56,] 12.40459  9.663617 6.032218 #>  [57,] 12.64741  9.903185 5.952294 #>  [58,] 12.51580  8.913315 6.001493 #>  [59,] 12.68062  8.860215 5.947856 #>  [60,] 12.48849  8.789741 5.798821 #>  [61,] 12.63057  9.048625 6.101481 #>  [62,] 12.44357  9.258952 6.177144 #>  [63,] 12.71003  9.286296 6.174933 #>  [64,] 12.51580  8.913315 6.001493 #>  [65,] 12.63057  9.048625 6.101481 #>  [66,] 12.68062  8.860215 5.947856 #>  [67,] 12.69531 10.276836 5.730695 #>  [68,] 12.61014 10.477591 5.596660 #>  [69,] 12.86774 10.424128 5.621580 #>  [70,] 12.77128  8.746288 5.777429 #>  [71,] 12.63822  8.674191 5.586975 #>  [72,] 12.48849  8.789741 5.798821 #>  [73,] 12.48849  8.789741 5.798821 #>  [74,] 12.68062  8.860215 5.947856 #>  [75,] 12.77128  8.746288 5.777429 #>  [76,] 12.61377 10.100669 5.829659 #>  [77,] 12.90867 10.121578 5.820741 #>  [78,] 12.64741  9.903185 5.952294 #>  [79,] 12.83033  9.498199 6.139681 #>  [80,] 12.55953  9.471941 6.154070 #>  [81,] 12.72354  9.688169 6.075475 #>  [82,] 12.71003  9.286296 6.174933 #>  [83,] 12.55953  9.471941 6.154070 #>  [84,] 12.83033  9.498199 6.139681 #>  [85,] 12.69531 10.276836 5.730695 #>  [86,] 12.90867 10.121578 5.820741 #>  [87,] 12.61377 10.100669 5.829659 #>  [88,] 12.88356  9.868361 5.978046 #>  [89,] 12.72354  9.688169 6.075475 #>  [90,] 12.64741  9.903185 5.952294 #>  [91,] 12.83056  8.972097 6.019796 #>  [92,] 12.68062  8.860215 5.947856 #>  [93,] 12.63057  9.048625 6.101481 #>  [94,] 12.87237  9.142800 6.099114 #>  [95,] 12.63057  9.048625 6.101481 #>  [96,] 12.71003  9.286296 6.174933 #>  [97,] 12.69531 10.276836 5.730695 #>  [98,] 12.86774 10.424128 5.621580 #>  [99,] 12.90867 10.121578 5.820741 #> [100,] 12.90867 10.121578 5.820741 #> [101,] 12.88356  9.868361 5.978046 #> [102,] 12.64741  9.903185 5.952294 #> [103,] 12.87237  9.142800 6.099114 #> [104,] 12.83056  8.972097 6.019796 #> [105,] 12.63057  9.048625 6.101481 #> [106,] 12.93745  9.334604 6.127300 #> [107,] 12.71003  9.286296 6.174933 #> [108,] 12.83033  9.498199 6.139681 #> [109,] 12.63822  8.674191 5.586975 #> [110,] 12.77128  8.746288 5.777429 #> [111,] 12.88742  8.643757 5.569807 #> [112,] 12.68062  8.860215 5.947856 #> [113,] 12.91474  8.840612 5.882928 #> [114,] 12.77128  8.746288 5.777429 #> [115,] 12.77555  8.593051 5.344138 #> [116,] 12.63822  8.674191 5.586975 #> [117,] 12.88742  8.643757 5.569807 #> [118,] 12.83056  8.972097 6.019796 #> [119,] 12.91474  8.840612 5.882928 #> [120,] 12.68062  8.860215 5.947856 #> [121,] 12.83033  9.498199 6.139681 #> [122,] 12.72354  9.688169 6.075475 #> [123,] 13.02396  9.691695 6.039870 #> [124,] 12.87237  9.142800 6.099114 #> [125,] 12.71003  9.286296 6.174933 #> [126,] 12.93745  9.334604 6.127300 #> [127,] 12.72354  9.688169 6.075475 #> [128,] 12.88356  9.868361 5.978046 #> [129,] 13.02396  9.691695 6.039870 #> [130,] 12.86774 10.424128 5.621580 #> [131,] 13.11328 10.338083 5.617101 #> [132,] 12.90867 10.121578 5.820741 #> [133,] 12.93745  9.334604 6.127300 #> [134,] 12.83033  9.498199 6.139681 #> [135,] 13.03070  9.495419 6.089211 #> [136,] 12.83056  8.972097 6.019796 #> [137,] 12.87237  9.142800 6.099114 #> [138,] 13.01435  9.017813 5.979335 #> [139,] 12.88356  9.868361 5.978046 #> [140,] 12.90867 10.121578 5.820741 #> [141,] 13.09570  9.911865 5.912032 #> [142,] 12.98397  8.713592 5.714010 #> [143,] 12.88742  8.643757 5.569807 #> [144,] 12.77128  8.746288 5.777429 #> [145,] 12.98397  8.713592 5.714010 #> [146,] 12.77128  8.746288 5.777429 #> [147,] 12.91474  8.840612 5.882928 #> [148,] 13.03070  9.495419 6.089211 #> [149,] 12.83033  9.498199 6.139681 #> [150,] 13.02396  9.691695 6.039870 #> [151,] 13.01435  9.017813 5.979335 #> [152,] 12.91474  8.840612 5.882928 #> [153,] 12.83056  8.972097 6.019796 #> [154,] 12.98461  8.557019 5.239944 #> [155,] 12.84922  8.544759 5.080940 #> [156,] 12.77555  8.593051 5.344138 #> [157,] 13.03654  9.201838 6.057649 #> [158,] 12.87237  9.142800 6.099114 #> [159,] 12.93745  9.334604 6.127300 #> [160,] 13.11328 10.338083 5.617101 #> [161,] 12.86774 10.424128 5.621580 #> [162,] 13.03104 10.547174 5.482190 #> [163,] 12.88742  8.643757 5.569807 #> [164,] 13.02677  8.598790 5.412838 #> [165,] 12.77555  8.593051 5.344138 #> [166,] 13.02396  9.691695 6.039870 #> [167,] 12.88356  9.868361 5.978046 #> [168,] 13.09570  9.911865 5.912032 #> [169,] 13.03654  9.201838 6.057649 #> [170,] 13.01435  9.017813 5.979335 #> [171,] 12.87237  9.142800 6.099114 #> [172,] 13.02677  8.598790 5.412838 #> [173,] 12.98461  8.557019 5.239944 #> [174,] 12.77555  8.593051 5.344138 #> [175,] 13.13033  9.366961 6.041864 #> [176,] 12.93745  9.334604 6.127300 #> [177,] 13.03070  9.495419 6.089211 #> [178,] 13.03654  9.201838 6.057649 #> [179,] 12.93745  9.334604 6.127300 #> [180,] 13.13033  9.366961 6.041864 #> [181,] 13.10403  8.665891 5.585294 #> [182,] 12.88742  8.643757 5.569807 #> [183,] 12.98397  8.713592 5.714010 #> [184,] 12.98461  8.557019 5.239944 #> [185,] 13.08039  8.542218 5.073414 #> [186,] 12.84922  8.544759 5.080940 #> [187,] 12.84922  8.544759 5.080940 #> [188,] 13.08039  8.542218 5.073414 #> [189,] 12.97147  8.523535 4.918392 #> [190,] 12.90867 10.121578 5.820741 #> [191,] 13.28447 10.076112 5.738918 #> [192,] 13.09570  9.911865 5.912032 #> [193,] 13.28447 10.076112 5.738918 #> [194,] 12.90867 10.121578 5.820741 #> [195,] 13.11328 10.338083 5.617101 #> [196,] 13.10403  8.665891 5.585294 #> [197,] 13.02677  8.598790 5.412838 #> [198,] 12.88742  8.643757 5.569807 #> [199,] 13.19081  8.873020 5.768261 #> [200,] 12.98397  8.713592 5.714010 #> [201,] 12.91474  8.840612 5.882928 #> [202,] 13.01435  9.017813 5.979335 #> [203,] 13.19081  8.873020 5.768261 #> [204,] 12.91474  8.840612 5.882928 #> [205,] 13.22431 10.496904 5.423122 #> [206,] 13.11328 10.338083 5.617101 #> [207,] 13.03104 10.547174 5.482190 #> [208,] 13.22307  9.556744 5.998142 #> [209,] 13.03070  9.495419 6.089211 #> [210,] 13.02396  9.691695 6.039870 #> [211,] 13.20333  9.152293 5.943582 #> [212,] 13.01435  9.017813 5.979335 #> [213,] 13.03654  9.201838 6.057649 #> [214,] 13.13033  9.366961 6.041864 #> [215,] 13.03070  9.495419 6.089211 #> [216,] 13.22307  9.556744 5.998142 #> [217,] 13.33213  9.775431 5.897279 #> [218,] 13.02396  9.691695 6.039870 #> [219,] 13.09570  9.911865 5.912032 #> [220,] 13.13033  9.366961 6.041864 #> [221,] 13.20333  9.152293 5.943582 #> [222,] 13.03654  9.201838 6.057649 #> [223,] 12.99650  8.514200 4.768242 #> [224,] 12.97147  8.523535 4.918392 #> [225,] 13.15192  8.526831 4.871885 #> [226,] 13.02677  8.598790 5.412838 #> [227,] 13.17430  8.582698 5.259176 #> [228,] 12.98461  8.557019 5.239944 #> [229,] 13.10403  8.665891 5.585294 #> [230,] 12.98397  8.713592 5.714010 #> [231,] 13.19081  8.873020 5.768261 #> [232,] 12.97147  8.523535 4.918392 #> [233,] 13.08039  8.542218 5.073414 #> [234,] 13.15192  8.526831 4.871885 #> [235,] 13.17430  8.582698 5.259176 #> [236,] 13.08039  8.542218 5.073414 #> [237,] 12.98461  8.557019 5.239944 #> [238,] 13.19081  8.873020 5.768261 #> [239,] 13.01435  9.017813 5.979335 #> [240,] 13.20333  9.152293 5.943582 #> [241,] 13.33213  9.775431 5.897279 #> [242,] 13.22307  9.556744 5.998142 #> [243,] 13.02396  9.691695 6.039870 #> [244,] 13.31846 10.303616 5.534289 #> [245,] 13.11328 10.338083 5.617101 #> [246,] 13.22431 10.496904 5.423122 #> [247,] 13.21734  8.637485 5.435658 #> [248,] 13.02677  8.598790 5.412838 #> [249,] 13.10403  8.665891 5.585294 #> [250,] 12.99650  8.514200 4.768242 #> [251,] 13.15192  8.526831 4.871885 #> [252,] 13.14784  8.513720 4.629004 #> [253,] 13.11328 10.338083 5.617101 #> [254,] 13.31846 10.303616 5.534289 #> [255,] 13.28447 10.076112 5.738918 #> [256,] 13.21734  8.637485 5.435658 #> [257,] 13.17430  8.582698 5.259176 #> [258,] 13.02677  8.598790 5.412838 #> [259,] 13.28447 10.076112 5.738918 #> [260,] 13.33213  9.775431 5.897279 #> [261,] 13.09570  9.911865 5.912032 #> [262,] 13.37159  9.374176 5.911555 #> [263,] 13.13033  9.366961 6.041864 #> [264,] 13.22307  9.556744 5.998142 #> [265,] 13.37159  9.374176 5.911555 #> [266,] 13.20333  9.152293 5.943582 #> [267,] 13.13033  9.366961 6.041864 #> [268,] 13.10403  8.665891 5.585294 #> [269,] 13.19081  8.873020 5.768261 #> [270,] 13.32844  8.740987 5.529862 #> [271,] 13.21734  8.637485 5.435658 #> [272,] 13.10403  8.665891 5.585294 #> [273,] 13.32844  8.740987 5.529862 #> [274,] 13.15192  8.526831 4.871885 #> [275,] 13.08039  8.542218 5.073414 #> [276,] 13.33501  8.588830 5.050298 #> [277,] 13.08039  8.542218 5.073414 #> [278,] 13.17430  8.582698 5.259176 #> [279,] 13.33501  8.588830 5.050298 #> [280,] 13.41899 10.408616 5.337369 #> [281,] 13.31846 10.303616 5.534289 #> [282,] 13.22431 10.496904 5.423122 #> [283,] 13.42489  9.124504 5.785563 #> [284,] 13.19081  8.873020 5.768261 #> [285,] 13.20333  9.152293 5.943582 #> [286,] 13.41425  9.588680 5.891487 #> [287,] 13.22307  9.556744 5.998142 #> [288,] 13.33213  9.775431 5.897279 #> [289,] 13.15192  8.526831 4.871885 #> [290,] 13.35913  8.551291 4.779712 #> [291,] 13.14784  8.513720 4.629004 #> [292,] 13.21734  8.637485 5.435658 #> [293,] 13.37734  8.658936 5.303746 #> [294,] 13.17430  8.582698 5.259176 #> [295,] 13.41425  9.588680 5.891487 #> [296,] 13.37159  9.374176 5.911555 #> [297,] 13.22307  9.556744 5.998142 #> [298,] 13.31846 10.303616 5.534289 #> [299,] 13.53361 10.132434 5.502032 #> [300,] 13.28447 10.076112 5.738918 #> [301,] 13.37159  9.374176 5.911555 #> [302,] 13.42489  9.124504 5.785563 #> [303,] 13.20333  9.152293 5.943582 #> [304,] 13.38646  8.534904 4.546468 #> [305,] 13.21561  8.513371 4.364137 #> [306,] 13.14784  8.513720 4.629004 #> [307,] 13.54907  9.880597 5.737481 #> [308,] 13.33213  9.775431 5.897279 #> [309,] 13.28447 10.076112 5.738918 #> [310,] 13.21734  8.637485 5.435658 #> [311,] 13.32844  8.740987 5.529862 #> [312,] 13.37734  8.658936 5.303746 #> [313,] 13.17430  8.582698 5.259176 #> [314,] 13.37734  8.658936 5.303746 #> [315,] 13.33501  8.588830 5.050298 #> [316,] 13.33501  8.588830 5.050298 #> [317,] 13.35913  8.551291 4.779712 #> [318,] 13.15192  8.526831 4.871885 #> [319,] 13.19081  8.873020 5.768261 #> [320,] 13.48185  8.931448 5.606654 #> [321,] 13.32844  8.740987 5.529862 #> [322,] 13.41899 10.408616 5.337369 #> [323,] 13.53361 10.132434 5.502032 #> [324,] 13.31846 10.303616 5.534289 #> [325,] 13.35913  8.551291 4.779712 #> [326,] 13.38646  8.534904 4.546468 #> [327,] 13.14784  8.513720 4.629004 #> [328,] 13.48185  8.931448 5.606654 #> [329,] 13.19081  8.873020 5.768261 #> [330,] 13.42489  9.124504 5.785563 #> [331,] 13.41425  9.588680 5.891487 #> [332,] 13.33213  9.775431 5.897279 #> [333,] 13.56443  9.688856 5.794654 #> [334,] 13.53361 10.132434 5.502032 #> [335,] 13.54907  9.880597 5.737481 #> [336,] 13.28447 10.076112 5.738918 #> [337,] 13.34763  8.523575 4.202727 #> [338,] 13.21561  8.513371 4.364137 #> [339,] 13.43674  8.534266 4.347343 #> [340,] 13.57233  9.493414 5.807070 #> [341,] 13.37159  9.374176 5.911555 #> [342,] 13.41425  9.588680 5.891487 #> [343,] 13.21561  8.513371 4.364137 #> [344,] 13.38646  8.534904 4.546468 #> [345,] 13.43674  8.534266 4.347343 #> [346,] 13.56443  9.688856 5.794654 #> [347,] 13.33213  9.775431 5.897279 #> [348,] 13.54907  9.880597 5.737481 #> [349,] 13.37159  9.374176 5.911555 #> [350,] 13.56444  9.309672 5.770869 #> [351,] 13.42489  9.124504 5.785563 #> [352,] 13.37734  8.658936 5.303746 #> [353,] 13.32844  8.740987 5.529862 #> [354,] 13.54308  8.799863 5.400207 #> [355,] 13.41899 10.408616 5.337369 #> [356,] 13.59733 10.302797 5.218469 #> [357,] 13.53361 10.132434 5.502032 #> [358,] 13.32844  8.740987 5.529862 #> [359,] 13.48185  8.931448 5.606654 #> [360,] 13.54308  8.799863 5.400207 #> [361,] 13.56221  8.630837 4.885275 #> [362,] 13.35913  8.551291 4.779712 #> [363,] 13.33501  8.588830 5.050298 #> [364,] 13.37159  9.374176 5.911555 #> [365,] 13.57233  9.493414 5.807070 #> [366,] 13.56444  9.309672 5.770869 #> [367,] 13.41425  9.588680 5.891487 #> [368,] 13.56443  9.688856 5.794654 #> [369,] 13.57233  9.493414 5.807070 #> [370,] 13.37734  8.658936 5.303746 #> [371,] 13.59507  8.711925 5.143078 #> [372,] 13.33501  8.588830 5.050298 #> [373,] 13.32517  8.583081 4.045523 #> [374,] 13.34763  8.523575 4.202727 #> [375,] 13.53670  8.595072 4.191088 #> [376,] 13.53647  8.583737 4.678016 #> [377,] 13.38646  8.534904 4.546468 #> [378,] 13.35913  8.551291 4.779712 #> [379,] 13.48185  8.931448 5.606654 #> [380,] 13.42489  9.124504 5.785563 #> [381,] 13.66511  9.166404 5.600447 #> [382,] 13.34763  8.523575 4.202727 #> [383,] 13.43674  8.534266 4.347343 #> [384,] 13.53670  8.595072 4.191088 #> [385,] 13.54907  9.880597 5.737481 #> [386,] 13.53361 10.132434 5.502032 #> [387,] 13.69075  9.791811 5.624581 #> [388,] 13.59507  8.711925 5.143078 #> [389,] 13.37734  8.658936 5.303746 #> [390,] 13.54308  8.799863 5.400207 #> [391,] 13.66511  9.166404 5.600447 #> [392,] 13.42489  9.124504 5.785563 #> [393,] 13.56444  9.309672 5.770869 #> [394,] 13.33501  8.588830 5.050298 #> [395,] 13.59507  8.711925 5.143078 #> [396,] 13.56221  8.630837 4.885275 #> [397,] 13.53647  8.583737 4.678016 #> [398,] 13.35913  8.551291 4.779712 #> [399,] 13.56221  8.630837 4.885275 #> [400,] 13.53670  8.595072 4.191088 #> [401,] 13.52339  8.704877 3.950609 #> [402,] 13.32517  8.583081 4.045523 #> [403,] 13.38646  8.534904 4.546468 #> [404,] 13.59579  8.593723 4.477271 #> [405,] 13.43674  8.534266 4.347343 #> [406,] 13.69075  9.791811 5.624581 #> [407,] 13.56443  9.688856 5.794654 #> [408,] 13.54907  9.880597 5.737481 #> [409,] 13.59733 10.302797 5.218469 #> [410,] 13.72178 10.100923 5.289084 #> [411,] 13.53361 10.132434 5.502032 #> [412,] 13.57233  9.493414 5.807070 #> [413,] 13.56443  9.688856 5.794654 #> [414,] 13.69443  9.593332 5.694065 #> [415,] 13.38646  8.534904 4.546468 #> [416,] 13.53647  8.583737 4.678016 #> [417,] 13.59579  8.593723 4.477271 #> [418,] 13.48185  8.931448 5.606654 #> [419,] 13.67058  8.971611 5.455964 #> [420,] 13.54308  8.799863 5.400207 #> [421,] 13.56444  9.309672 5.770869 #> [422,] 13.57233  9.493414 5.807070 #> [423,] 13.71043  9.411132 5.658388 #> [424,] 13.43674  8.534266 4.347343 #> [425,] 13.59579  8.593723 4.477271 #> [426,] 13.53670  8.595072 4.191088 #> [427,] 13.69443  9.593332 5.694065 #> [428,] 13.56443  9.688856 5.794654 #> [429,] 13.69075  9.791811 5.624581 #> [430,] 13.48185  8.931448 5.606654 #> [431,] 13.66511  9.166404 5.600447 #> [432,] 13.67058  8.971611 5.455964 #> [433,] 13.57233  9.493414 5.807070 #> [434,] 13.69443  9.593332 5.694065 #> [435,] 13.71043  9.411132 5.658388 #> [436,] 13.53361 10.132434 5.502032 #> [437,] 13.80622  9.859612 5.388372 #> [438,] 13.69075  9.791811 5.624581 #> [439,] 13.66511  9.166404 5.600447 #> [440,] 13.56444  9.309672 5.770869 #> [441,] 13.71043  9.411132 5.658388 #> [442,] 13.72178 10.100923 5.289084 #> [443,] 13.80622  9.859612 5.388372 #> [444,] 13.53361 10.132434 5.502032 #> [445,] 13.69175 10.358401 4.913703 #> [446,] 13.78112 10.148368 5.085270 #> [447,] 13.59733 10.302797 5.218469 #> [448,] 13.59733 10.302797 5.218469 #> [449,] 13.78112 10.148368 5.085270 #> [450,] 13.72178 10.100923 5.289084 #> [451,] 13.74815  8.876462 5.272223 #> [452,] 13.59507  8.711925 5.143078 #> [453,] 13.54308  8.799863 5.400207 #> [454,] 13.51794  9.371027 3.226922 #> [455,] 13.56831  9.236409 3.366909 #> [456,] 13.70218  9.413402 3.339836 #> [457,] 13.53670  8.595072 4.191088 #> [458,] 13.70028  8.715570 4.088079 #> [459,] 13.52339  8.704877 3.950609 #> [460,] 13.73596  8.676233 4.688635 #> [461,] 13.53647  8.583737 4.678016 #> [462,] 13.56221  8.630837 4.885275 #> [463,] 13.67058  8.971611 5.455964 #> [464,] 13.74815  8.876462 5.272223 #> [465,] 13.54308  8.799863 5.400207 #> [466,] 13.51794  9.371027 3.226922 #> [467,] 13.70218  9.413402 3.339836 #> [468,] 13.61997  9.594428 3.149355 #> [469,] 13.74707  8.867100 3.904143 #> [470,] 13.52703  8.873154 3.721837 #> [471,] 13.52339  8.704877 3.950609 #> [472,] 13.59507  8.711925 5.143078 #> [473,] 13.75803  8.740358 4.945350 #> [474,] 13.56221  8.630837 4.885275 #> [475,] 13.52703  8.873154 3.721837 #> [476,] 13.72265  9.030205 3.683589 #> [477,] 13.56741  9.083419 3.511314 #> [478,] 13.59579  8.593723 4.477271 #> [479,] 13.53647  8.583737 4.678016 #> [480,] 13.73596  8.676233 4.688635 #> [481,] 13.56831  9.236409 3.366909 #> [482,] 13.56741  9.083419 3.511314 #> [483,] 13.72991  9.229383 3.506204 #> [484,] 13.69443  9.593332 5.694065 #> [485,] 13.69075  9.791811 5.624581 #> [486,] 13.82607  9.585385 5.491726 #> [487,] 13.59579  8.593723 4.477271 #> [488,] 13.74786  8.678023 4.277088 #> [489,] 13.53670  8.595072 4.191088 #> [490,] 13.71043  9.411132 5.658388 #> [491,] 13.69443  9.593332 5.694065 #> [492,] 13.82607  9.585385 5.491726 #> [493,] 13.66511  9.166404 5.600447 #> [494,] 13.71043  9.411132 5.658388 #> [495,] 13.81915  9.341323 5.480881 #> [496,] 13.78112 10.148368 5.085270 #> [497,] 13.82851 10.009201 5.207640 #> [498,] 13.72178 10.100923 5.289084 #> [499,] 13.76341  8.789705 5.103325 #> [500,] 13.59507  8.711925 5.143078 #> [501,] 13.74815  8.876462 5.272223 #> [502,] 13.69175 10.358401 4.913703 #> [503,] 13.86606 10.130698 4.819283 #> [504,] 13.78112 10.148368 5.085270 #> [505,] 13.86193  9.135833 5.316413 #> [506,] 13.67058  8.971611 5.455964 #> [507,] 13.66511  9.166404 5.600447 #> [508,] 13.80622  9.859612 5.388372 #> [509,] 13.82607  9.585385 5.491726 #> [510,] 13.69075  9.791811 5.624581 #> [511,] 13.72991  9.229383 3.506204 #> [512,] 13.70218  9.413402 3.339836 #> [513,] 13.56831  9.236409 3.366909 #> [514,] 13.70028  8.715570 4.088079 #> [515,] 13.74707  8.867100 3.904143 #> [516,] 13.52339  8.704877 3.950609 #> [517,] 13.75803  8.740358 4.945350 #> [518,] 13.73596  8.676233 4.688635 #> [519,] 13.56221  8.630837 4.885275 #> [520,] 13.74786  8.678023 4.277088 #> [521,] 13.70028  8.715570 4.088079 #> [522,] 13.53670  8.595072 4.191088 #> [523,] 13.80622  9.859612 5.388372 #> [524,] 13.72178 10.100923 5.289084 #> [525,] 13.82851 10.009201 5.207640 #> [526,] 13.72265  9.030205 3.683589 #> [527,] 13.52703  8.873154 3.721837 #> [528,] 13.74707  8.867100 3.904143 #> [529,] 13.75803  8.740358 4.945350 #> [530,] 13.59507  8.711925 5.143078 #> [531,] 13.76341  8.789705 5.103325 #> [532,] 13.56741  9.083419 3.511314 #> [533,] 13.72265  9.030205 3.683589 #> [534,] 13.72991  9.229383 3.506204 #> [535,] 13.81845 10.313971 4.574928 #> [536,] 13.86606 10.130698 4.819283 #> [537,] 13.69175 10.358401 4.913703 #> [538,] 13.82607  9.585385 5.491726 #> [539,] 13.81915  9.341323 5.480881 #> [540,] 13.71043  9.411132 5.658388 #> [541,] 13.61997  9.594428 3.149355 #> [542,] 13.70218  9.413402 3.339836 #> [543,] 13.80066  9.614812 3.321878 #> [544,] 13.78288  8.677824 4.448385 #> [545,] 13.59579  8.593723 4.477271 #> [546,] 13.73596  8.676233 4.688635 #> [547,] 13.74815  8.876462 5.272223 #> [548,] 13.67058  8.971611 5.455964 #> [549,] 13.86193  9.135833 5.316413 #> [550,] 13.86193  9.135833 5.316413 #> [551,] 13.66511  9.166404 5.600447 #> [552,] 13.81915  9.341323 5.480881 #> [553,] 13.78288  8.677824 4.448385 #> [554,] 13.74786  8.678023 4.277088 #> [555,] 13.59579  8.593723 4.477271 #> [556,] 13.61997  9.594428 3.149355 #> [557,] 13.80066  9.614812 3.321878 #> [558,] 13.78273  9.834163 3.196881 #> [559,] 13.88726  9.879000 5.214845 #> [560,] 13.80622  9.859612 5.388372 #> [561,] 13.82851 10.009201 5.207640 #> [562,] 13.78112 10.148368 5.085270 #> [563,] 13.91639  9.929898 5.030913 #> [564,] 13.82851 10.009201 5.207640 #> [565,] 13.91639  9.929898 5.030913 #> [566,] 13.78112 10.148368 5.085270 #> [567,] 13.86606 10.130698 4.819283 #> [568,] 13.80622  9.859612 5.388372 #> [569,] 13.94141  9.705822 5.194958 #> [570,] 13.82607  9.585385 5.491726 #> [571,] 13.90515  8.869693 5.029524 #> [572,] 13.76341  8.789705 5.103325 #> [573,] 13.74815  8.876462 5.272223 #> [574,] 13.72265  9.030205 3.683589 #> [575,] 13.85000  9.201860 3.654579 #> [576,] 13.72991  9.229383 3.506204 #> [577,] 13.82851 10.009201 5.207640 #> [578,] 13.91639  9.929898 5.030913 #> [579,] 13.88726  9.879000 5.214845 #> [580,] 13.72991  9.229383 3.506204 #> [581,] 13.90472  9.472686 3.547634 #> [582,] 13.70218  9.413402 3.339836 #> [583,] 13.86606 10.130698 4.819283 #> [584,] 13.81845 10.313971 4.574928 #> [585,] 13.94372 10.082017 4.570537 #> [586,] 13.82607  9.585385 5.491726 #> [587,] 13.94058  9.426353 5.272532 #> [588,] 13.81915  9.341323 5.480881 #> [589,] 13.94141  9.705822 5.194958 #> [590,] 13.80622  9.859612 5.388372 #> [591,] 13.88726  9.879000 5.214845 #> [592,] 13.90515  8.869693 5.029524 #> [593,] 13.75803  8.740358 4.945350 #> [594,] 13.76341  8.789705 5.103325 #> [595,] 13.87332  8.820403 4.148132 #> [596,] 13.70028  8.715570 4.088079 #> [597,] 13.74786  8.678023 4.277088 #> [598,] 13.87332  8.820403 4.148132 #> [599,] 13.74707  8.867100 3.904143 #> [600,] 13.70028  8.715570 4.088079 #> [601,] 13.74815  8.876462 5.272223 #> [602,] 13.86193  9.135833 5.316413 #> [603,] 13.88686  8.981950 5.178041 #> [604,] 13.87265  9.080899 3.804367 #> [605,] 13.72265  9.030205 3.683589 #> [606,] 13.74707  8.867100 3.904143 #> [607,] 13.92769  8.817774 4.797980 #> [608,] 13.73596  8.676233 4.688635 #> [609,] 13.75803  8.740358 4.945350 #> [610,] 13.80066  9.614812 3.321878 #> [611,] 13.70218  9.413402 3.339836 #> [612,] 13.90472  9.472686 3.547634 #> [613,] 13.94058  9.426353 5.272532 #> [614,] 13.86193  9.135833 5.316413 #> [615,] 13.81915  9.341323 5.480881 #> [616,] 13.90515  8.869693 5.029524 #> [617,] 13.74815  8.876462 5.272223 #> [618,] 13.88686  8.981950 5.178041 #> [619,] 13.92672  8.761196 4.574720 #> [620,] 13.78288  8.677824 4.448385 #> [621,] 13.73596  8.676233 4.688635 #> [622,] 13.92004  9.776270 3.428097 #> [623,] 13.78273  9.834163 3.196881 #> [624,] 13.80066  9.614812 3.321878 #> [625,] 13.78288  8.677824 4.448385 #> [626,] 13.91027  8.781433 4.346870 #> [627,] 13.74786  8.678023 4.277088 #> [628,] 13.94058  9.426353 5.272532 #> [629,] 13.82607  9.585385 5.491726 #> [630,] 13.94141  9.705822 5.194958 #> [631,] 13.94372 10.082017 4.570537 #> [632,] 13.81845 10.313971 4.574928 #> [633,] 13.96188 10.136379 4.285713 #> [634,] 13.72265  9.030205 3.683589 #> [635,] 13.87265  9.080899 3.804367 #> [636,] 13.85000  9.201860 3.654579 #> [637,] 13.88726  9.879000 5.214845 #> [638,] 13.91639  9.929898 5.030913 #> [639,] 13.94141  9.705822 5.194958 #> [640,] 13.90472  9.472686 3.547634 #> [641,] 13.72991  9.229383 3.506204 #> [642,] 13.85000  9.201860 3.654579 #> [643,] 13.91639  9.929898 5.030913 #> [644,] 13.86606 10.130698 4.819283 #> [645,] 13.98937  9.906953 4.735453 #> [646,] 13.90515  8.869693 5.029524 #> [647,] 13.92769  8.817774 4.797980 #> [648,] 13.75803  8.740358 4.945350 #> [649,] 13.92004  9.776270 3.428097 #> [650,] 13.89819  9.986331 3.341209 #> [651,] 13.78273  9.834163 3.196881 #> [652,] 13.94372 10.082017 4.570537 #> [653,] 13.98937  9.906953 4.735453 #> [654,] 13.86606 10.130698 4.819283 #> [655,] 13.91027  8.781433 4.346870 #> [656,] 13.87332  8.820403 4.148132 #> [657,] 13.74786  8.678023 4.277088 #> [658,] 13.87265  9.080899 3.804367 #> [659,] 13.74707  8.867100 3.904143 #> [660,] 13.91998  8.980805 4.014925 #> [661,] 13.92769  8.817774 4.797980 #> [662,] 13.92672  8.761196 4.574720 #> [663,] 13.73596  8.676233 4.688635 #> [664,] 13.87332  8.820403 4.148132 #> [665,] 13.91998  8.980805 4.014925 #> [666,] 13.74707  8.867100 3.904143 #> [667,] 13.86193  9.135833 5.316413 #> [668,] 13.96880  9.079944 5.065478 #> [669,] 13.88686  8.981950 5.178041 #> [670,] 13.90472  9.472686 3.547634 #> [671,] 13.92004  9.776270 3.428097 #> [672,] 13.80066  9.614812 3.321878 #> [673,] 13.91639  9.929898 5.030913 #> [674,] 14.01854  9.739991 4.894617 #> [675,] 13.94141  9.705822 5.194958 #> [676,] 13.78288  8.677824 4.448385 #> [677,] 13.92672  8.761196 4.574720 #> [678,] 13.91027  8.781433 4.346870 #> [679,] 14.01539  9.281618 5.089361 #> [680,] 13.86193  9.135833 5.316413 #> [681,] 13.94058  9.426353 5.272532 #> [682,] 13.96880  9.079944 5.065478 #> [683,] 13.90515  8.869693 5.029524 #> [684,] 13.88686  8.981950 5.178041 #> [685,] 14.01854  9.739991 4.894617 #> [686,] 13.91639  9.929898 5.030913 #> [687,] 13.98937  9.906953 4.735453 #> [688,] 13.96880  9.079944 5.065478 #> [689,] 13.86193  9.135833 5.316413 #> [690,] 14.01539  9.281618 5.089361 #> [691,] 13.85000  9.201860 3.654579 #> [692,] 13.87265  9.080899 3.804367 #> [693,] 13.96928  9.274678 3.772721 #> [694,] 13.94141  9.705822 5.194958 #> [695,] 14.04168  9.499406 5.007382 #> [696,] 13.94058  9.426353 5.272532 #> [697,] 13.97895  9.985900 3.550107 #> [698,] 13.89819  9.986331 3.341209 #> [699,] 13.92004  9.776270 3.428097 #> [700,] 14.03484  9.892107 4.451011 #> [701,] 13.94372 10.082017 4.570537 #> [702,] 13.96188 10.136379 4.285713 #> [703,] 13.96928  9.274678 3.772721 #> [704,] 13.90472  9.472686 3.547634 #> [705,] 13.85000  9.201860 3.654579 #> [706,] 14.03484  9.892107 4.451011 #> [707,] 13.98937  9.906953 4.735453 #> [708,] 13.94372 10.082017 4.570537 #> [709,] 13.90515  8.869693 5.029524 #> [710,] 13.99136  9.008509 4.880021 #> [711,] 13.92769  8.817774 4.797980 #> [712,] 13.96880  9.079944 5.065478 #> [713,] 13.99136  9.008509 4.880021 #> [714,] 13.90515  8.869693 5.029524 #> [715,] 14.01854  9.739991 4.894617 #> [716,] 14.04168  9.499406 5.007382 #> [717,] 13.94141  9.705822 5.194958 #> [718,] 13.87332  8.820403 4.148132 #> [719,] 13.91027  8.781433 4.346870 #> [720,] 13.98940  8.979785 4.258107 #> [721,] 13.98940  8.979785 4.258107 #> [722,] 13.91998  8.980805 4.014925 #> [723,] 13.87332  8.820403 4.148132 #> [724,] 13.90472  9.472686 3.547634 #> [725,] 14.02812  9.762370 3.659987 #> [726,] 13.92004  9.776270 3.428097 #> [727,] 13.99986  9.187644 3.943338 #> [728,] 13.87265  9.080899 3.804367 #> [729,] 13.91998  8.980805 4.014925 #> [730,] 14.04168  9.499406 5.007382 #> [731,] 14.01539  9.281618 5.089361 #> [732,] 13.94058  9.426353 5.272532 #> [733,] 14.00312  8.960518 4.661213 #> [734,] 13.92672  8.761196 4.574720 #> [735,] 13.92769  8.817774 4.797980 #> [736,] 13.91027  8.781433 4.346870 #> [737,] 13.92672  8.761196 4.574720 #> [738,] 13.99177  8.910397 4.462697 #> [739,] 14.02812  9.762370 3.659987 #> [740,] 13.97895  9.985900 3.550107 #> [741,] 13.92004  9.776270 3.428097 #> [742,] 13.96928  9.274678 3.772721 #> [743,] 13.87265  9.080899 3.804367 #> [744,] 13.99986  9.187644 3.943338 #> [745,] 14.02425 10.056950 4.009003 #> [746,] 14.06236  9.897692 4.177214 #> [747,] 13.96188 10.136379 4.285713 #> [748,] 13.92769  8.817774 4.797980 #> [749,] 13.99136  9.008509 4.880021 #> [750,] 14.00312  8.960518 4.661213 #> [751,] 14.03484  9.892107 4.451011 #> [752,] 13.96188 10.136379 4.285713 #> [753,] 14.06236  9.897692 4.177214 #> [754,] 13.98937  9.906953 4.735453 #> [755,] 14.07625  9.621387 4.648886 #> [756,] 14.01854  9.739991 4.894617 #> [757,] 14.02894  9.171439 4.949043 #> [758,] 13.96880  9.079944 5.065478 #> [759,] 14.01539  9.281618 5.089361 #> [760,] 13.96880  9.079944 5.065478 #> [761,] 14.02894  9.171439 4.949043 #> [762,] 13.99136  9.008509 4.880021 #> [763,] 13.98940  8.979785 4.258107 #> [764,] 13.91027  8.781433 4.346870 #> [765,] 13.99177  8.910397 4.462697 #> [766,] 13.99177  8.910397 4.462697 #> [767,] 13.92672  8.761196 4.574720 #> [768,] 14.00312  8.960518 4.661213 #> [769,] 14.03484  9.892107 4.451011 #> [770,] 14.07625  9.621387 4.648886 #> [771,] 13.98937  9.906953 4.735453 #> [772,] 13.96928  9.274678 3.772721 #> [773,] 14.05962  9.553329 3.774074 #> [774,] 13.90472  9.472686 3.547634 #> [775,] 13.98940  8.979785 4.258107 #> [776,] 14.02426  9.123488 4.111164 #> [777,] 13.91998  8.980805 4.014925 #> [778,] 14.06895  9.570791 4.841438 #> [779,] 14.04168  9.499406 5.007382 #> [780,] 14.01854  9.739991 4.894617 #> [781,] 14.03506  9.976091 3.796770 #> [782,] 13.97895  9.985900 3.550107 #> [783,] 14.02812  9.762370 3.659987 #> [784,] 14.05962  9.553329 3.774074 #> [785,] 14.02812  9.762370 3.659987 #> [786,] 13.90472  9.472686 3.547634 #> [787,] 14.02426  9.123488 4.111164 #> [788,] 13.99986  9.187644 3.943338 #> [789,] 13.91998  8.980805 4.014925 #> [790,] 14.06534  9.316288 4.931682 #> [791,] 14.01539  9.281618 5.089361 #> [792,] 14.04168  9.499406 5.007382 #> [793,] 14.06534  9.316288 4.931682 #> [794,] 14.02894  9.171439 4.949043 #> [795,] 14.01539  9.281618 5.089361 #> [796,] 14.00312  8.960518 4.661213 #> [797,] 13.99136  9.008509 4.880021 #> [798,] 14.05591  9.187791 4.765840 #> [799,] 13.99136  9.008509 4.880021 #> [800,] 14.02894  9.171439 4.949043 #> [801,] 14.05591  9.187791 4.765840 #> [802,] 14.06895  9.570791 4.841438 #> [803,] 14.01854  9.739991 4.894617 #> [804,] 14.07625  9.621387 4.648886 #> [805,] 14.02425 10.056950 4.009003 #> [806,] 14.03506  9.976091 3.796770 #> [807,] 14.07476  9.882533 3.975956 #> [808,] 14.07476  9.882533 3.975956 #> [809,] 14.06236  9.897692 4.177214 #> [810,] 14.02425 10.056950 4.009003 #> [811,] 14.00312  8.960518 4.661213 #> [812,] 14.05391  9.130985 4.489610 #> [813,] 13.99177  8.910397 4.462697 #> [814,] 13.99177  8.910397 4.462697 #> [815,] 14.05391  9.130985 4.489610 #> [816,] 13.98940  8.979785 4.258107 #> [817,] 13.96928  9.274678 3.772721 #> [818,] 13.99986  9.187644 3.943338 #> [819,] 14.06030  9.374015 3.904436 #> [820,] 14.08406  9.402682 4.808647 #> [821,] 14.04168  9.499406 5.007382 #> [822,] 14.06895  9.570791 4.841438 #> [823,] 14.02894  9.171439 4.949043 #> [824,] 14.06534  9.316288 4.931682 #> [825,] 14.05591  9.187791 4.765840 #> [826,] 14.09759  9.676940 4.311905 #> [827,] 14.03484  9.892107 4.451011 #> [828,] 14.06236  9.897692 4.177214 #> [829,] 14.08406  9.402682 4.808647 #> [830,] 14.06534  9.316288 4.931682 #> [831,] 14.04168  9.499406 5.007382 #> [832,] 14.09759  9.676940 4.311905 #> [833,] 14.07625  9.621387 4.648886 #> [834,] 14.03484  9.892107 4.451011 #> [835,] 14.05391  9.130985 4.489610 #> [836,] 14.00312  8.960518 4.661213 #> [837,] 14.05591  9.187791 4.765840 #> [838,] 14.03506  9.976091 3.796770 #> [839,] 14.02812  9.762370 3.659987 #> [840,] 14.08321  9.742876 3.865709 #> [841,] 14.06202  9.184296 4.266416 #> [842,] 14.02426  9.123488 4.111164 #> [843,] 13.98940  8.979785 4.258107 #> [844,] 13.96928  9.274678 3.772721 #> [845,] 14.06030  9.374015 3.904436 #> [846,] 14.05962  9.553329 3.774074 #> [847,] 14.08406  9.402682 4.808647 #> [848,] 14.06895  9.570791 4.841438 #> [849,] 14.07625  9.621387 4.648886 #> [850,] 14.05391  9.130985 4.489610 #> [851,] 14.06202  9.184296 4.266416 #> [852,] 13.98940  8.979785 4.258107 #> [853,] 14.07476  9.882533 3.975956 #> [854,] 14.03506  9.976091 3.796770 #> [855,] 14.08321  9.742876 3.865709 #> [856,] 14.08406  9.402682 4.808647 #> [857,] 14.05591  9.187791 4.765840 #> [858,] 14.06534  9.316288 4.931682 #> [859,] 13.99986  9.187644 3.943338 #> [860,] 14.02426  9.123488 4.111164 #> [861,] 14.08796  9.330293 4.096359 #> [862,] 14.05962  9.553329 3.774074 #> [863,] 14.08321  9.742876 3.865709 #> [864,] 14.02812  9.762370 3.659987 #> [865,] 14.07476  9.882533 3.975956 #> [866,] 14.10367  9.714926 4.069590 #> [867,] 14.06236  9.897692 4.177214 #> [868,] 14.05591  9.187791 4.765840 #> [869,] 14.09490  9.353058 4.633102 #> [870,] 14.05391  9.130985 4.489610 #> [871,] 14.07625  9.621387 4.648886 #> [872,] 14.09490  9.353058 4.633102 #> [873,] 14.08406  9.402682 4.808647 #> [874,] 14.08406  9.402682 4.808647 #> [875,] 14.09490  9.353058 4.633102 #> [876,] 14.05591  9.187791 4.765840 #> [877,] 13.99986  9.187644 3.943338 #> [878,] 14.08796  9.330293 4.096359 #> [879,] 14.06030  9.374015 3.904436 #> [880,] 14.06236  9.897692 4.177214 #> [881,] 14.10367  9.714926 4.069590 #> [882,] 14.09759  9.676940 4.311905 #> [883,] 14.08796  9.330293 4.096359 #> [884,] 14.02426  9.123488 4.111164 #> [885,] 14.06202  9.184296 4.266416 #> [886,] 14.10224  9.389903 4.390141 #> [887,] 14.07625  9.621387 4.648886 #> [888,] 14.09759  9.676940 4.311905 #> [889,] 14.07476  9.882533 3.975956 #> [890,] 14.08321  9.742876 3.865709 #> [891,] 14.10367  9.714926 4.069590 #> [892,] 14.07625  9.621387 4.648886 #> [893,] 14.10224  9.389903 4.390141 #> [894,] 14.09490  9.353058 4.633102 #> [895,] 14.06202  9.184296 4.266416 #> [896,] 14.05391  9.130985 4.489610 #> [897,] 14.10224  9.389903 4.390141 #> [898,] 14.09490  9.353058 4.633102 #> [899,] 14.10224  9.389903 4.390141 #> [900,] 14.05391  9.130985 4.489610 #> [901,] 14.10178  9.542224 3.968829 #> [902,] 14.05962  9.553329 3.774074 #> [903,] 14.06030  9.374015 3.904436 #> [904,] 14.10178  9.542224 3.968829 #> [905,] 14.08321  9.742876 3.865709 #> [906,] 14.05962  9.553329 3.774074 #> [907,] 14.10224  9.389903 4.390141 #> [908,] 14.08796  9.330293 4.096359 #> [909,] 14.06202  9.184296 4.266416 #> [910,] 14.10178  9.542224 3.968829 #> [911,] 14.10367  9.714926 4.069590 #> [912,] 14.08321  9.742876 3.865709 #> [913,] 14.08796  9.330293 4.096359 #> [914,] 14.10178  9.542224 3.968829 #> [915,] 14.06030  9.374015 3.904436 #> [916,] 14.10367  9.714926 4.069590 #> [917,] 14.11451  9.530800 4.162000 #> [918,] 14.09759  9.676940 4.311905 #> [919,] 14.11451  9.530800 4.162000 #> [920,] 14.10224  9.389903 4.390141 #> [921,] 14.09759  9.676940 4.311905 #> [922,] 14.11451  9.530800 4.162000 #> [923,] 14.08796  9.330293 4.096359 #> [924,] 14.10224  9.389903 4.390141 #> [925,] 14.10367  9.714926 4.069590 #> [926,] 14.10178  9.542224 3.968829 #> [927,] 14.11451  9.530800 4.162000 #> [928,] 14.11451  9.530800 4.162000 #> [929,] 14.10178  9.542224 3.968829 #> [930,] 14.08796  9.330293 4.096359"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/read_xfiber.html","id":null,"dir":"Reference","previous_headings":"","what":"Import from Avizo xfiber Excel — read_xfiber","title":"Import from Avizo xfiber Excel — read_xfiber","text":"default, xfiber write excel file XML format. Loading file resaving xlsx allow read R function.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/read_xfiber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import from Avizo xfiber Excel — read_xfiber","text":"","code":"read_xfiber(filename)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/read_xfiber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import from Avizo xfiber Excel — read_xfiber","text":"filename string: file name load (xlsx).","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/read_xfiber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import from Avizo xfiber Excel — read_xfiber","text":"tibble: tracks concatenated.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/read_xfiber_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Import from Avizo xfiber XML — read_xfiber_xml","title":"Import from Avizo xfiber XML — read_xfiber_xml","text":"Import Avizo xfiber XML","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/read_xfiber_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import from Avizo xfiber XML — read_xfiber_xml","text":"","code":"read_xfiber_xml(filename)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/read_xfiber_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import from Avizo xfiber XML — read_xfiber_xml","text":"filename string: file name load (XML file).","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/read_xfiber_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import from Avizo xfiber XML — read_xfiber_xml","text":"tibble: tracks concatenated.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/relative_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the relative proportion of the items of a given vector — relative_proportion","title":"Calculate the relative proportion of the items of a given vector — relative_proportion","text":"Calculate relative proportion items given vector","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/relative_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the relative proportion of the items of a given vector — relative_proportion","text":"","code":"relative_proportion(x)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/relative_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the relative proportion of the items of a given vector — relative_proportion","text":"x Vector length 3","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/relative_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the relative proportion of the items of a given vector — relative_proportion","text":"normalized unit vector length 3","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/ssc.html","id":null,"dir":"Reference","previous_headings":"","what":"Skew-symmetric cross-product — ssc","title":"Skew-symmetric cross-product — ssc","text":"Calculate skew-symmetric cross-product matrix v See: See: http://math.stackexchange.com//897677/6965","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/ssc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skew-symmetric cross-product — ssc","text":"","code":"ssc(v)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/ssc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skew-symmetric cross-product — ssc","text":"v Matrix","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/ssc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skew-symmetric cross-product — ssc","text":"Skew-symmetric cross-product `v`","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/stl_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate area of an stl mesh — stl_area","title":"Calculate area of an stl mesh — stl_area","text":"Calculate area stl mesh","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/stl_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate area of an stl mesh — stl_area","text":"","code":"stl_area(fname)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/stl_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate area of an stl mesh — stl_area","text":"fname String: path stl file","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/stl_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate area of an stl mesh — stl_area","text":"Numeric: Area stl mesh","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/write_arrows.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Maya arrows code — write_arrows","title":"Write Maya arrows code — write_arrows","text":"Write Maya arrows code","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/write_arrows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Maya arrows code — write_arrows","text":"","code":"write_arrows(   muscle,   side,   x_origin,   y_origin,   z_origin,   x_insertion,   y_insertion,   z_insertion,   force,   cylinder_r,   cone_r,   cone_hr,   outfile,   rev_arrows )"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/write_arrows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Maya arrows code — write_arrows","text":"muscle Muscle side Side (L/R) x_origin x origin y_origin y origin z_origin z origin x_insertion x insertion y_insertion y insertion z_insertion z insertion force Force (N) cylinder_r Cylinder radius cone_r Cone radius cone_hr Cone height outfile String file write rev_arrows Boolean Reverse arrows @export","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/xfiber_to_maya.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Maya mel file from xfiber tracing — xfiber_to_maya","title":"Generate Maya mel file from xfiber tracing — xfiber_to_maya","text":"Generate Maya mel file xfiber tracing","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/xfiber_to_maya.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Maya mel file from xfiber tracing — xfiber_to_maya","text":"","code":"xfiber_to_maya(fname, outfile, radius = 8, n = NULL)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/xfiber_to_maya.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Maya mel file from xfiber tracing — xfiber_to_maya","text":"fname string: Path excel file outfile string: Path output file radius numeric: Radius cylinders Maya n numeric: Number tracks randomly select","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/xprod.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-product of two 3d vectors — xprod","title":"Cross-product of two 3d vectors — xprod","text":"function calculates cross-product two 3d (3 element) vectors. Note different `base::crossprod()`.","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/xprod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-product of two 3d vectors — xprod","text":"","code":"xprod(a, b)"},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/xprod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-product of two 3d vectors — xprod","text":"numeric vector length 3 b numeric vector length 3","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/xprod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-product of two 3d vectors — xprod","text":"numeric vector length 3","code":""},{"path":"https://middleton-lab.github.io/MuscleTernary/reference/xprod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-product of two 3d vectors — xprod","text":"","code":"xprod(c(0, 1, 2), c(1, 1, 1)) #> [1] -1  2 -1"}]
